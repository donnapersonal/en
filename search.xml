<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>理解 line-height</title>
      <link href="/en/2021/05/15/line-height/"/>
      <url>/en/2021/05/15/line-height/</url>
      
        <content type="html"><![CDATA[<h1 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h1><p>As the name implies, <code>line-height</code> refers to the height of a line of text. Specifically, it is the distance between the <code>baselines</code> of two adjacent lines of text.</p><p>In the illustration below, the distance between the two red lines represents the <code>line-height</code> (The <code>vertical-align</code> property (top&#x2F;middle&#x2F;baseline&#x2F;bottom) is related to <code>line-height</code>).</p><ul><li>The distance between the top and bottom lines within the same line of text is referred to as the <code>content area height</code>, which is determined by the font type and font size. In some fonts, the font size is equal to the content area height.</li><li>The distance between the bottom line of the previous line and the top line of the next line is referred to as <code>line spacing</code>.</li></ul><p>Therefore, <code>line-height = content area height + line spacing</code>.</p><blockquote><p>When the <code>line-height</code> value is changed, the content area height remains constant, and only the <code>line spacing</code> is adjusted, which in turn affects the total line height.</p></blockquote><p><img src="line-height/linehight1.png" alt="line-height"></p><p>When the half of the line spacing becomes a negative value (i.e., <code>line-height &lt; font-size</code>), the lines will overlap. This can result in the following situation:</p><p><img src="line-height/lineheight2.png" alt="When the half of the line spacing becomes a negative value"></p><h1 id="line-height-and-Line-Boxs-Height"><a href="#line-height-and-Line-Boxs-Height" class="headerlink" title="line-height and Line Boxs Height"></a>line-height and Line Boxs Height</h1><p>In <code>CSS</code>, two properties affect height: <code>height</code> and <code>line-height</code>.</p><ul><li>If an element does not have a defined <code>height</code> (including percentage-based heights), its final rendered height will be determined by <code>line-height</code>.</li><li>Even in IE6, where the default height is around 11 pixels (a known bug), this behavior remains the same.</li></ul><p>Scenario: Suppose we have an empty <code>div</code>.</p><ul><li>If no explicit height is set (greater than 1px), the div height will be 0.</li><li>If there is a space or text inside the div, the height is determined by <code>line-height</code>, not the text itself.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test1: The div has a font size of 20px but a line-height of 0px → div height = 0px</span></span><br><span class="line"><span class="comment">// test2: The div has a font size of 0px but a line-height of 20px → div height = 20px</span></span><br><span class="line"><span class="comment">// This confirms that the div&#x27;s height is determined by `line-height`, not the text content.</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;test1&quot;</span>&gt;<span class="title class_">Test</span>&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test2&quot;</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">.<span class="property">test1</span> &#123;</span><br><span class="line">  font-<span class="attr">size</span>: 20px;</span><br><span class="line">  line-<span class="attr">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attr">border</span>: 1px solid #cccccc;</span><br><span class="line">  <span class="attr">background</span>: #eeeeee;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="property">test2</span> &#123;</span><br><span class="line">  font-<span class="attr">size</span>: <span class="number">0</span>;</span><br><span class="line">  line-<span class="attr">height</span>: 20px;</span><br><span class="line">  <span class="attr">border</span>: 1px solid #cccccc;</span><br><span class="line">  <span class="attr">background</span>: #eeeeee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="line-height/lineheight3.png" alt="example1"></p><h1 id="Inline-Box-Model"><a href="#Inline-Box-Model" class="headerlink" title="Inline Box Model"></a>Inline Box Model</h1><p><strong>Line box:</strong></p><ul><li>A virtual rectangular box that consists of <code>inline boxes</code> within the same line</li><li>Each line of text forms a separate line box, and if there are multiple lines of content, each line has its own line box.</li><li><strong>The height of a line box is the distance from the highest point to the lowest point of the inline boxes within that line.</strong></li><li>The line box is composed of top margin, text height, and bottom margin, where the top and bottom margins are equal in size.</li></ul><p>A <code>&lt;div&gt;</code> without a defined height property has its total height determined by the stacked heights of its <code>line boxes</code>.</p><p><strong>Inline box:</strong></p><ul><li>Each inline element within a <code>line box</code> (e.g., <code>text</code>, <code>img</code>, <code>span</code> elements, and other inline elements) forms an individual <code>inline box</code>.</li><li>The height of an <code>inline box</code> is equal to the <code>font-size</code>, meaning that: <strong>Setting line-height does not change the inline box height, but instead affects line spacing</strong>.</li></ul><p><strong>Containing box:</strong></p><ul><li>The total height of an element is formed by vertically stacking the heights of all its line boxes.</li></ul><p><img src="line-height/lineheight4.png" alt="line box"></p><p><strong>Content area</strong>：</p><ul><li>For <code>non-replaced elements</code>, the <code>content area</code> size is determined by <code>font-size</code> and the <code>font itself</code>.</li><li>For <code>replaced elements</code> (e.g., <code>img</code>, <code>input</code> fields), the <code>content area</code> is determined by the element’s own <code>width</code> and <code>height</code>.</li></ul><blockquote><p>W3C’s Explanation of the Content Area: CSS 2.1 does not define what the content area of an inline box is (see 10.6.1 above), and thus different UAs (User Agents) may draw the backgrounds and borders in different places.</p></blockquote><p>Some believe that the height of a line box is determined by the largest line-height within that line. This is incorrect.</p><p>For example, in the code below, the largest line-height is 50px, but due to the vertical-align shift (-20px), the actual line box height is greater than 50px.</p><blockquote><p>The height of a line box is the distance from the highest point to the lowest point of its inline boxes.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;line-height:30px&quot;</span>&gt;</span><br><span class="line">  <span class="title class_">Inline</span> <span class="title class_">Box</span> <span class="number">1</span>, line height 30px</span><br><span class="line">  &lt;span style=<span class="string">&quot;line-height:50px;background:yellow;vertical-align:-20px&quot;</span>&gt;</span><br><span class="line">    <span class="title class_">Inline</span> <span class="title class_">Box</span> <span class="number">2</span>, line height 50px</span><br><span class="line">  &lt;/span&gt;        </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="line-height/lineheight5.png" alt="example2"></p><h1 id="Line-Box-Height"><a href="#Line-Box-Height" class="headerlink" title="Line Box Height"></a>Line Box Height</h1><p>Browsers calculate the height of each <code>inline box</code> within a <code>line box</code>, but the calculation method differs depending on the type of inline box.</p><ul><li><p>Replaced elements &amp; inline-* elements</p><p>For replaced elements (such as <code>img</code>, <code>input</code>, etc.), <code>inline-*</code> elements, or <code>flexbox</code> children, the height is determined by their <code>margin box</code>.</p><p>For <code>inline-block</code> elements, such as a <code>span</code> with &#96;display: inline-block</p><ul><li>The height is calculated as: <code>height + 2 * margin</code></li><li>If height is set to <code>auto</code>, the element’s height equals: <code>line-height + 2 * margin</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  background-<span class="attr">color</span>: #ccc;</span><br><span class="line">  <span class="attr">color</span>: #fff;</span><br><span class="line">&#125;</span><br><span class="line">span &#123;</span><br><span class="line">  <span class="attr">display</span>: inline-block;</span><br><span class="line">  <span class="attr">height</span>: 30px;</span><br><span class="line">  <span class="attr">margin</span>: 10px;</span><br><span class="line">  <span class="attr">background</span>: #fff;</span><br><span class="line">  <span class="attr">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div&gt;xxx&lt;span&gt;xxx&lt;<span class="regexp">/span&gt;xxx&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p><img src="line-height/lineheight6.png" alt="example3"></p></li><li><p>Non-replaced elements</p><p>For <code>non-replaced elements</code>, the height of an inline box is determined by its <code>line-height</code>, not its <code>content area</code>.</p><p>Even if it seems like the <code>content area</code> is affecting the line box height, it is actually <code>line-height</code> controlling it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  background-<span class="attr">color</span>: #ccc;</span><br><span class="line">  font-<span class="attr">size</span>: 20px;</span><br><span class="line">  <span class="attr">color</span>: #fff;</span><br><span class="line">  font-<span class="attr">family</span>: <span class="title class_">Sana</span>;</span><br><span class="line">&#125;</span><br><span class="line">span &#123;</span><br><span class="line">  <span class="attr">background</span>: #fff;</span><br><span class="line">  <span class="attr">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div&gt;xxx&lt;span&gt;xxx&lt;<span class="regexp">/span&gt;xxx&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p><img src="line-height/lineheight7.png" alt="example4"></p><p><strong>The line box height is determined by the highest and lowest points of all inline boxes in that line.</strong></p><p>This calculation includes <code>an invisible element called strut</code>.</p></li><li><p>The role of strut in line box height</p><p>Browsers consider that every line box contains an invisible inline box of width 0, known as <code>strut</code>.</p><p><strong><code>strut</code> inherits the <code>line-height</code> from the parent element</strong>, meaning it impacts line box height calculation.</p><p>Example: Why is there a gap below an img inside a div?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  <span class="attr">background</span>: #eee; </span><br><span class="line">  <span class="attr">border</span>: 1px solid #<span class="number">000</span>; </span><br><span class="line">  box-<span class="attr">sizing</span>: border-box; </span><br><span class="line">&#125;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./image.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="line-height/lineheight8.png" alt="example5"></p><p>By default, the <code>img</code> aligns its <code>bottom</code> with the parent element’s baseline (vertical-align: baseline;).</p><p><strong>The baseline is actually set by strut, causing a visible gap.</strong></p><p><img src="line-height/lineheight9.png" alt="example6"></p><p><code>strut</code> acts like an invisible “x” character in the line box. </p><p>Since strut has a line-height, this results in an extra space below the image.</p></li><li><p>Why does the gap exist?</p><ul><li>The <code>strut</code> element inherits line-height, affecting layout.</li><li>The default <code>vertical-align</code> is <code>baseline</code>.</li></ul></li><li><p>How to fix the gap?</p><table><thead><tr><th>解决方案</th><th>效果</th><th>潜在问题</th></tr></thead><tbody><tr><td>Modify strut’s line-height</td><td>Reduces inherited space</td><td>Must set line-height on the parent element</td></tr><tr><td>Change vertical-align of img</td><td>Directly aligns the image correctly</td><td>Best approach</td></tr><tr><td>Set display: block; for img</td><td>Removes inline-level behavior</td><td>Block has no vertical-align attribute，no baseline aligns. Affects surrounding text.</td></tr></tbody></table><p>(1) and (3) point may affect the text layout inside the parent element, so the second approach is the better choice.</p></li></ul><p>Additionally, the <code>margin</code>, <code>padding</code>, and <code>border</code>properties of <code>non-replaced elements</code> do not affect the calculation of line box height.</p><p>When an <code>inline-level box</code> has a <code>line-height</code> smaller than its <code>content area</code>, the line box height will be smaller than the content area.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  <span class="attr">background</span>: #eee;</span><br><span class="line">  <span class="attr">border</span>: 1px solid #<span class="number">000</span>;</span><br><span class="line">  box-<span class="attr">sizing</span>: border-box;</span><br><span class="line">  font-<span class="attr">size</span>: 50px;</span><br><span class="line">  line-<span class="attr">height</span>: 10px;</span><br><span class="line">&#125;</span><br><span class="line">span &#123;</span><br><span class="line">  <span class="attr">background</span>: red;</span><br><span class="line">  <span class="attr">margin</span>: 10px;</span><br><span class="line">  <span class="attr">padding</span>: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="line-height/lineheight10.png" alt="example7"></p><p>As a result, the element’s background, padding, and other styles may <code>overflow</code> outside the line box.</p><h1 id="Values-and-Inheritance-of-line-height"><a href="#Values-and-Inheritance-of-line-height" class="headerlink" title="Values and Inheritance of line-height"></a>Values and Inheritance of line-height</h1><p><strong>normal (default value)</strong></p><p>By default, browsers typically set line-height to <code>1.2</code>, though the exact value may vary depending on the browser and font.</p><p>The computed <code>line-height</code> is determined based on the <code>font-size</code> of the element.</p><p><code>Child elements do not inherit the computed line-height value from the parent</code>. Instead, they <code>inherit the line-height property itself</code> and <code>calculate their own line-height based on their own font-size</code>.</p><p>This means that child elements scale their line-height proportionally to their own font-size rather than the computed value of the parent.</p><p><img src="line-height/lineheight11.png" alt="normal"></p><p><strong>number (unitless value)</strong></p><p>If you want both <code>flexibility</code> (like <code>normal</code>) and a <code>custom value</code>, you can set line-height to a <code>unitless number</code>.</p><p>The only difference between number and normal is that:</p><ul><li>With number, you define the exact multiplier (e.g., 1.5).</li><li>With normal, the browser decides the multiplier automatically.</li></ul><p><code>Child elements inherit the unitless line-height value</code> (e.g., 1.5) and then compute their own line-height based on their own <code>font-size</code>.</p><p><img src="line-height/lineheight12.png" alt="number"></p><p><strong>inherit</strong></p><p>The element <code>inherits the computed line-height value from its parent</code>.</p><p>If the parent’s line-height is <code>24px</code>, the child element will also have <code>24px</code> line height, regardless of its font-size.</p><p>If any descendant element also sets <code>l</code>ine-height: inherit;&#96;, it will keep using the inherited value from the original parent.</p><p><strong>length (fixed pixel value)</strong></p><p>Setting <code>line-height</code> to a <code>fixed length</code> (e.g., 20px) makes that element’s line height exactly 20px, <code>independent of font-size</code>.</p><p>Unlike number or normal, length values <code>do not scale dynamically with font-size</code>.</p><p>Descendant elements will inherit the exact line-height value (20px), unless they explicitly override it.</p><p><strong>%</strong></p><p>When line-height is set as a percentage, it is calculated <code>based on the element’s own font-size</code>.</p><p>Example:</p><ul><li>If <code>font-size = 16px</code> and <code>line-height = 120%</code>, then: 16 × 120% &#x3D; 19.2px</li><li>The computed line-height for this element is 19.2px.</li></ul><p>The child does not inherit 120%. Instead, it inherits the computed line-height value (19.2px) from the parent.</p><p><strong>Summary</strong></p><p>| Value Type | line-height ｜Computed line-height | Inherited line-height by Child |<br>| — | — | — | — |<br>| <code>inherit</code> | Parent element’s  line-height | No computation needed | Parent element’s line-height value |<br>| <code>length</code> | 20px | No computation needed | 20px |<br>| <code>%</code> | 120% | Own font-size (16px) × 120% &#x3D; 19.2px | Inherits the computed line-height value of 19.2px from the parent, not 120%. |<br>| <code>normal</code> | 1.2 | Own font-size(16px) * 1.2 &#x3D; 19.2px | Inherit 1.2，line-height &#x3D; own font-size * 1.2 |<br>| <code>number</code> | 1.5 | Own font-size(16px) * 1.5 &#x3D; 24px | Inherit 1.5，line-height &#x3D; own font-size * 1.5 |</p><blockquote><p><strong>Note:</strong> It is recommended to use a <code>unitless number</code> for <code>line-height</code> instead of the <code>em</code> unit.</p><p>This is because <code>em</code> requires a reference value, which is not fixed—different properties may have different reference values.</p></blockquote><h1 id="Vertical-Centering-of-Line-Height"><a href="#Vertical-Centering-of-Line-Height" class="headerlink" title="Vertical Centering of Line Height"></a>Vertical Centering of Line Height</h1><p>line-height has a special property called <code>vertical centering</code>. The final rendering of line-height is achieved through line boxes. Regardless of how large or small the line boxes are compared to the text, <strong>they always share the same vertical centerline as the text content</strong>.</p><p>Looking at the example of test1 in the image above, the line box height is 0, yet it remains symmetrically distributed around the text’s vertical centerline. This important characteristic can be used to achieve vertical alignment of text or images.</p><h1 id="Using-line-height-Instead-of-height-to-Avoid-hasLayout-Issues"><a href="#Using-line-height-Instead-of-height-to-Avoid-hasLayout-Issues" class="headerlink" title="Using line-height Instead of height to Avoid hasLayout Issues"></a>Using line-height Instead of height to Avoid hasLayout Issues</h1><p>In some cases, line-height and height can be used interchangeably because they both define a height for an element. However, there is a key difference between them:</p><ul><li><strong>Using height triggers hasLayout in Internet Explorer (IE), while line-height does not.</strong></li></ul><p>Previously, in <code>IE6</code>, developers often used <code>height</code> to <code>clear floats</code> because height would <code>trigger hasLayout</code> in IE, ensuring layout correctness. However, in some cases, hasLayout can cause unexpected behavior, and it’s better to avoid it.</p><p><strong>Why use line-height instead of height?</strong></p><ul><li>In IE6&#x2F;7, when an element with inline-block contains a block-level element, and if the block-level element triggers hasLayout, it can cause the container to break out of its expected layout and expand to 100% width.</li><li>This issue breaks button layouts that are designed to adjust to text size dynamically.</li></ul><p><strong>Solution</strong>: Use line-height instead of height to prevent hasLayout from being triggered in IE.</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>script Tag - defer and async</title>
      <link href="/en/2021/04/15/script-defer-async/"/>
      <url>/en/2021/04/15/script-defer-async/</url>
      
        <content type="html"><![CDATA[<p><img src="script-defer-async/script.png" alt="script 标签"></p><h1 id="Regular-Tag"><a href="#Regular-Tag" class="headerlink" title="Regular  Tag"></a>Regular <script> Tag</h1><p><code>JS</code> may modify <code>HTML</code> and <code>CSS</code>, so the download and execution of <code>JS</code> cannot run in parallel with <code>HTML/CSS</code>.</p><p>Code Execution Process:</p><ul><li>When the <code>HTML</code> parsing process encounters an external <code>JS</code> file, it pauses the <code>HTML</code> parsing.</li><li>It then waits for the script to download and parse before continuing the previously interrupted <code>HTML</code> parsing.</li></ul><p>Consequences of Using the <code>&lt;script&gt;</code> Tagfor External <code>JS</code>:</p><ul><li><strong>It affects overall page performance. If the network is slow, the entire website will wait for <code>JS</code> to load, preventing further rendering.</strong></li><li><strong>Since it interrupts the <code>HTML</code> parsing flow, it can cause blank page delays, impacting user experience.</strong></li></ul><blockquote><p>Previously, a common practice was to place the <code>&lt;script&gt;</code> tag at the end of the <code>&lt;body&gt;</code> to wait for the <code>DOM</code> to be fully parsed before loading <code>JS</code>. </p><p>However, <code>HTML5</code> introduced another set of asynchronous loading methods: <code>defer/async</code>.</p></blockquote><h1 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h1><p>By adding <code>defer=&quot;defer&quot;</code> or simply writing defer inside the <code>&lt;script&gt;</code> tag, you can make the external <code>JS</code> file <code>load asynchronously</code>.</p><p>Code Execution Process:</p><ul><li>When the <code>HTML</code> parsing process encounters an external <code>JS</code> file, it will start <code>downloading the script in a separate thread</code>, but <code>it will not execute it immediately</code>, so it does not block the <code>HTML</code> parsing.</li><li>The script execution will wait until the <code>HTML</code> parsing is complete (excluding resources such as images), and then it will be executed before the <code>DOMContentLoaded</code> event is triggered. </li><li>Note: The <code>DOMContentLoaded</code> event will wait until all <code>defer</code> scripts have finished executing before being triggered.</li></ul><p>Important Notes:</p><ul><li>This method allows writing inline scripts inside the <code>&lt;script&gt;</code> closing tag.</li><li>This feature is only supported in <code>IE</code> and some newer versions of Firefox and Chrome.</li><li><code>IE6</code> and <code>IE7</code> can handle at most <code>2</code> deferred scripts asynchronously. If there are more than two, the third script will wait until the first two have finished loading before it starts.</li><li><strong>All defer scripts are guaranteed to execute in order.</strong></li></ul><h1 id="async"><a href="#async" class="headerlink" title="async"></a>async</h1><p><code>async</code> is the abbreviation for <code>asynchronous</code>, introduced as part of the <code>HTML5</code> standard.</p><p>Code Execution Process:</p><ul><li>When the <code>HTML</code> parsing process encounters an external <code>JS</code> file with <code>async</code>, it will start downloading the script in a new thread. Once the script finishes downloading, it will immediately execute, interrupting the ongoing <code>HTML</code> parsing.</li><li>After the script execution is completed, the <code>HTML</code> parsing process will resume from where it was interrupted.</li></ul><p>Important Notes:</p><ul><li>This method works in all browsers except <code>IE6</code> to <code>IE8</code>.</li><li>Unlike <code>defer</code>, you cannot write inline scripts inside the <code>&lt;script&gt;</code> tag when using <code>async</code>; it can only reference external scripts. (Although this was the original standard, modern browser engines now allow inline scripts in <code>async</code> tags if no <code>src</code>is specified.)</li><li><code>async</code> scripts do not guarantee execution order. Instead, scripts execute in a <code>race</code> condition—whichever script finishes downloading first will execute first, regardless of their order in the document.</li></ul><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p><strong>defer and async cannot be used together.</strong> If both <code>async</code> and <code>defer</code> attributes are present in a <code>&lt;script&gt;</code> tag, defer will be ignored, and the browser will follow the behavior dictated by the <code>async</code> attribute.</p><h1 id="Compatibility-Strategies"><a href="#Compatibility-Strategies" class="headerlink" title="Compatibility Strategies"></a>Compatibility Strategies</h1><p>Brute-force Method: A common workaround is to use two <code>&lt;script&gt;</code> tags, one with <code>defer</code> and the other with <code>async</code>. However, this method has the following drawbacks:</p><ul><li>In higher versions of <code>IE</code>, both scripts may be loaded twice, causing conflicts.</li><li>Some browsers support neither attribute, leading to a scenario where neither script is loaded.</li></ul><p>Optimized Approach: A better solution is to dynamically add <code>&lt;script&gt;</code> tags, as per the <code>W3C</code> standard, which states that dynamically added <code>&lt;script&gt;</code> tags are <strong>asynchronous by default</strong>.</p><ul><li>The <code>src</code> file download happens asynchronously, meaning it does not block subsequent code execution.</li><li>This allows the script to be inserted into the DOM <strong>while downloading the resource simultaneously</strong>.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Note: The readyState if-else condition must be written before script.src = url and appendChild.</span></span><br><span class="line"><span class="comment">// This is because the computer’s execution speed can be very fast, and by the time it reaches script.src = url, the script might have already been fully loaded.</span></span><br><span class="line"><span class="comment">// In this case, readyState would have already changed to loaded, meaning the onreadystatechange event would never be triggered.</span></span><br><span class="line"><span class="comment">// If the callback function is defined inside the script being loaded, it must be wrapped inside an anonymous function.</span></span><br><span class="line"><span class="comment">// This prevents syntax errors due to calling an undeclared function and ensures that the script is fully loaded before execution.</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">loadScript</span>(<span class="params">url, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">    script.<span class="property">type</span> = text/javascript;</span><br><span class="line">    <span class="keyword">if</span> (script.<span class="property">readyState</span>) &#123; <span class="comment">// IE 和高版本的 chrome、firefox</span></span><br><span class="line">      script.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (script.<span class="property">readyState</span> === <span class="string">&quot;loaded&quot;</span> || script.<span class="property">readyState</span> === <span class="string">&quot;complete&quot;</span>) &#123;</span><br><span class="line">          script.<span class="property">onreadystatechange</span> = <span class="literal">null</span>;</span><br><span class="line">          callback &amp;&amp; <span class="title function_">callback</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      script.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">// safari chrome opera firefox&#125;</span></span><br><span class="line">        callback &amp;&amp; <span class="title function_">callback</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    script.<span class="property">src</span> = url;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></script></h1>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
