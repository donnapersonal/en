<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>script Tag - defer and async</title>
      <link href="/en/2021/04/15/script-defer-async/"/>
      <url>/en/2021/04/15/script-defer-async/</url>
      
        <content type="html"><![CDATA[<p><img src="script-defer-async/script.png" alt="script 标签"></p><h1 id="Regular-Tag"><a href="#Regular-Tag" class="headerlink" title="Regular  Tag"></a>Regular <script> Tag</h1><p><code>JS</code> may modify <code>HTML</code> and <code>CSS</code>, so the download and execution of <code>JS</code> cannot run in parallel with <code>HTML/CSS</code>.</p><p>Code Execution Process:</p><ul><li>When the <code>HTML</code> parsing process encounters an external <code>JS</code> file, it pauses the <code>HTML</code> parsing.</li><li>It then waits for the script to download and parse before continuing the previously interrupted <code>HTML</code> parsing.</li></ul><p>Consequences of Using the <code>&lt;script&gt;</code> Tagfor External <code>JS</code>:</p><ul><li><strong>It affects overall page performance. If the network is slow, the entire website will wait for <code>JS</code> to load, preventing further rendering.</strong></li><li><strong>Since it interrupts the <code>HTML</code> parsing flow, it can cause blank page delays, impacting user experience.</strong></li></ul><blockquote><p>Previously, a common practice was to place the <code>&lt;script&gt;</code> tag at the end of the <code>&lt;body&gt;</code> to wait for the <code>DOM</code> to be fully parsed before loading <code>JS</code>. </p><p>However, <code>HTML5</code> introduced another set of asynchronous loading methods: <code>defer/async</code>.</p></blockquote><h1 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h1><p>By adding <code>defer=&quot;defer&quot;</code> or simply writing defer inside the <code>&lt;script&gt;</code> tag, you can make the external <code>JS</code> file <code>load asynchronously</code>.</p><p>Code Execution Process:</p><ul><li>When the <code>HTML</code> parsing process encounters an external <code>JS</code> file, it will start <code>downloading the script in a separate thread</code>, but <code>it will not execute it immediately</code>, so it does not block the <code>HTML</code> parsing.</li><li>The script execution will wait until the <code>HTML</code> parsing is complete (excluding resources such as images), and then it will be executed before the <code>DOMContentLoaded</code> event is triggered. </li><li>Note: The <code>DOMContentLoaded</code> event will wait until all <code>defer</code> scripts have finished executing before being triggered.</li></ul><p>Important Notes:</p><ul><li>This method allows writing inline scripts inside the <code>&lt;script&gt;</code> closing tag.</li><li>This feature is only supported in <code>IE</code> and some newer versions of Firefox and Chrome.</li><li><code>IE6</code> and <code>IE7</code> can handle at most <code>2</code> deferred scripts asynchronously. If there are more than two, the third script will wait until the first two have finished loading before it starts.</li><li><strong>All defer scripts are guaranteed to execute in order.</strong></li></ul><h1 id="async"><a href="#async" class="headerlink" title="async"></a>async</h1><p><code>async</code> is the abbreviation for <code>asynchronous</code>, introduced as part of the <code>HTML5</code> standard.</p><p>Code Execution Process:</p><ul><li>When the <code>HTML</code> parsing process encounters an external <code>JS</code> file with <code>async</code>, it will start downloading the script in a new thread. Once the script finishes downloading, it will immediately execute, interrupting the ongoing <code>HTML</code> parsing.</li><li>After the script execution is completed, the <code>HTML</code> parsing process will resume from where it was interrupted.</li></ul><p>Important Notes:</p><ul><li>This method works in all browsers except <code>IE6</code> to <code>IE8</code>.</li><li>Unlike <code>defer</code>, you cannot write inline scripts inside the <code>&lt;script&gt;</code> tag when using <code>async</code>; it can only reference external scripts. (Although this was the original standard, modern browser engines now allow inline scripts in <code>async</code> tags if no <code>src</code>is specified.)</li><li><code>async</code> scripts do not guarantee execution order. Instead, scripts execute in a <code>race</code> condition—whichever script finishes downloading first will execute first, regardless of their order in the document.</li></ul><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p><strong>defer and async cannot be used together.</strong> If both <code>async</code> and <code>defer</code> attributes are present in a <code>&lt;script&gt;</code> tag, defer will be ignored, and the browser will follow the behavior dictated by the <code>async</code> attribute.</p><h1 id="Compatibility-Strategies"><a href="#Compatibility-Strategies" class="headerlink" title="Compatibility Strategies"></a>Compatibility Strategies</h1><p>Brute-force Method: A common workaround is to use two <code>&lt;script&gt;</code> tags, one with <code>defer</code> and the other with <code>async</code>. However, this method has the following drawbacks:</p><ul><li>In higher versions of <code>IE</code>, both scripts may be loaded twice, causing conflicts.</li><li>Some browsers support neither attribute, leading to a scenario where neither script is loaded.</li></ul><p>Optimized Approach: A better solution is to dynamically add <code>&lt;script&gt;</code> tags, as per the <code>W3C</code> standard, which states that dynamically added <code>&lt;script&gt;</code> tags are <strong>asynchronous by default</strong>.</p><ul><li>The <code>src</code> file download happens asynchronously, meaning it does not block subsequent code execution.</li><li>This allows the script to be inserted into the DOM <strong>while downloading the resource simultaneously</strong>.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Note: The readyState if-else condition must be written before script.src = url and appendChild.</span></span><br><span class="line"><span class="comment">// This is because the computer’s execution speed can be very fast, and by the time it reaches script.src = url, the script might have already been fully loaded.</span></span><br><span class="line"><span class="comment">// In this case, readyState would have already changed to loaded, meaning the onreadystatechange event would never be triggered.</span></span><br><span class="line"><span class="comment">// If the callback function is defined inside the script being loaded, it must be wrapped inside an anonymous function.</span></span><br><span class="line"><span class="comment">// This prevents syntax errors due to calling an undeclared function and ensures that the script is fully loaded before execution.</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">loadScript</span>(<span class="params">url, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">    script.<span class="property">type</span> = text/javascript;</span><br><span class="line">    <span class="keyword">if</span> (script.<span class="property">readyState</span>) &#123; <span class="comment">// IE 和高版本的 chrome、firefox</span></span><br><span class="line">      script.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (script.<span class="property">readyState</span> === <span class="string">&quot;loaded&quot;</span> || script.<span class="property">readyState</span> === <span class="string">&quot;complete&quot;</span>) &#123;</span><br><span class="line">          script.<span class="property">onreadystatechange</span> = <span class="literal">null</span>;</span><br><span class="line">          callback &amp;&amp; <span class="title function_">callback</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      script.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">// safari chrome opera firefox&#125;</span></span><br><span class="line">        callback &amp;&amp; <span class="title function_">callback</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    script.<span class="property">src</span> = url;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></script></h1>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
