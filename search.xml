<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>理解 line-height</title>
      <link href="/2021/05/15/line-height/"/>
      <url>/2021/05/15/line-height/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><code>line-height(行高)</code>：顾名思意，指一行文字的高度，具体来说是指两行文字间<code>基线</code>之间的距离，如下图中两条红线之间的距离就是行高 <code>line-height</code>（<code>vertical-align</code> 中有 <code>top、middle、baseline、bottom</code>，与之是有关联的）</p><p>同一行的顶线到底线的距离是<code>内容区域高度</code>，内容区域的高度只与字体和字号有关，在有的字体中字体大小等于内容区域高度</p><p>上一行的底线和下一行的顶线的距离是<code>行间距</code>，可以看出<code>行高 = 内容高度 + 行间距</code>，<strong>当改变 <code>line-height</code> 值时，内容高度是不变的，改变的只是<code>行间距</code>，从而改变了行高</strong></p><p><img src="linehight1.png" alt="line-height"></p><p>当半行距为负值（<code>line-height &lt; font-size</code>）时，两行之间就会重叠，如下图所示：</p><p><img src="lineheight2.png" alt="当半行距为负值时"></p><h1 id="line-height-与-line-boxes-的高度"><a href="#line-height-与-line-boxes-的高度" class="headerlink" title="line-height 与 line boxes 的高度"></a>line-height 与 line boxes 的高度</h1><p><code>CSS</code> 中起高度作用是 <code>height</code>、<code>line-height</code></p><p>若一个标签没有定义 <code>height</code> 属性(包括百分比高度)，那其最终表现的高度一定是由 <code>line-height</code> 起作用，即使是 <code>IE6</code> 下 <code>11</code> 像素左右默认高度 <code>bug</code> 也是如此</p><p>假设：有个空的 <code>div</code>，若没有设置至少大于 <code>1</code> 像素高度 <code>height</code> 值时，该 <code>div</code> 的高度就是个 <code>0</code>；若该 <code>div</code> 里打入一个空格或文字，则此 <code>div</code> 就会有个高度，此处根本不是文字撑开了 <code>div</code> 高度，而是 <code>line-height</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test1 div 有文字大小但行高为 0，结果 div 的高度就是个 0</span></span><br><span class="line"><span class="comment">// test2 div 文字大小为 0，但有行高为 20 像素，结果 div 高度就是 20 像素，这就说明撑开 div 高度的是 line-height 不是文字内容</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;test1&quot;</span>&gt;测试&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test2&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">.<span class="property">test1</span> &#123;</span><br><span class="line">  font-<span class="attr">size</span>: 20px;</span><br><span class="line">  line-<span class="attr">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attr">border</span>: 1px solid #cccccc;</span><br><span class="line">  <span class="attr">background</span>: #eeeeee;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">test2</span> &#123;</span><br><span class="line">  font-<span class="attr">size</span>: <span class="number">0</span>;</span><br><span class="line">  line-<span class="attr">height</span>: 20px;</span><br><span class="line">  <span class="attr">border</span>: 1px solid #cccccc;</span><br><span class="line">  <span class="attr">background</span>: #eeeeee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="lineheight3.png" alt="example1"></p><h1 id="行内盒模型"><a href="#行内盒模型" class="headerlink" title="行内盒模型"></a>行内盒模型</h1><p><strong>行框（line box）</strong>：</p><ul><li>指本行的一个虚拟的矩形框，由该行中<code>行内框</code>组成</li><li>每行文字都是一个行框，当有多行内容时每一行都有自己的行框</li><li><strong>行框的高度是这一行<code>行内框</code>的最高点到最低点的距离</strong></li><li>行框由上间距、文本高度、下间距组成，上间距的距离与下间距的距离是相等的</li></ul><p>一个没有设置 <code>height</code> 属性的 <code>div</code> 的高度就是由一个个 <code>line boxes</code> 的高度堆积而成的</p><p><strong>行内框（inline box）</strong>：</p><ul><li><code>行框</code>下的每个标签（<code>文字</code>、<code>图片</code>、<code>&lt;span&gt;</code> 之类的 <code>inline</code> 属性的标签）都是一个单独的行内框</li><li><code>行内框</code>的高度等于 <code>font-size</code>，<strong>设定 <code>line-height</code> 时行内框的高度不变，改变的是行间距</strong></li></ul><p><strong>包含盒子 containing box</strong>：</p><ul><li>元素中行框的高度垂直叠加形成包含盒子的高度，即元素的高度</li></ul><p><img src="lineheight4.png" alt="line box"></p><p><strong>content area</strong>：</p><ul><li>对于<code>非替换元素</code>来说 <code>content area</code> 的范围由 <code>font-size</code> 以及字体本身决定</li><li>对于<code>替换元素</code>来说，由元素自有宽高决定</li></ul><blockquote><p>W3C 对 content area 的解释：CSS 2.1 does not define what the content area of an inline box is (see 10.6.1 above) and thus different UAs may draw the backgrounds and borders in different places.</p></blockquote><p>有种说法是行框的高度等于这一行中行内框中最大的 <code>line-height</code>，这种说法是错误的</p><p>下面代码中的 <code>div</code> 中的行内框最大的行高是 <code>50px</code>，但由于这个行内框存在 <code>vertical-align</code> 偏差，所以这个行框的高度大于 <code>50</code>  像素</p><blockquote><p><strong>即行框的高度是这一行<code>行内框</code>的最高点到最低点的距离</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;line-height:30px&quot;</span>&gt;</span><br><span class="line">  行内框<span class="number">1</span>,行高30px&lt;span style=<span class="string">&quot;line-height:50px;background:yellow;vertical-align:-20px&quot;</span>&gt;行内框<span class="number">2</span>,行高50px,&lt;/span&gt;        </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="lineheight5.png" alt="example2"></p><h1 id="line-box-高度"><a href="#line-box-高度" class="headerlink" title="line box 高度"></a>line box 高度</h1><p>浏览器会计算 <code>line box</code> 中每一个 <code>inline box</code> 的高度，对于不同的 <code>inline box</code> 计算方式有所不同</p><ul><li><p>若是一个替换元素（如 <code>img</code>、<code>input</code> 等）、<code>inline-*</code> 元素或是 <code>flexbox</code> 中的子元素，高度由其 <code>margin box</code> 决定 </p><p><code>inline-block 元素</code>：这里 <code>span</code> <code>inline box</code> 的高度是 <code>height</code> + <code>margin * 2</code>，若 <code>height</code> 的值是 <code>auto</code>，则高度就是等于 <code>line-height + margin * 2</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  background-<span class="attr">color</span>: #ccc;</span><br><span class="line">  <span class="attr">color</span>: #fff;</span><br><span class="line">&#125;</span><br><span class="line">span &#123;</span><br><span class="line">  <span class="attr">display</span>: inline-block;</span><br><span class="line">  <span class="attr">height</span>: 30px;</span><br><span class="line">  <span class="attr">margin</span>: 10px;</span><br><span class="line">  <span class="attr">background</span>: #fff;</span><br><span class="line">  <span class="attr">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div&gt;xxx&lt;span&gt;xxx&lt;<span class="regexp">/span&gt;xxx&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p><img src="lineheight6.png" alt="example3"></p></li><li><p>若是一个非替换元素，高度由它的 <code>line-height</code> 决定，而不是 <code>content area</code>，虽然有时候看起来像 <code>content area</code> 撑开了 <code>line box</code> 的高度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  background-<span class="attr">color</span>: #ccc;</span><br><span class="line">  font-<span class="attr">size</span>: 20px;</span><br><span class="line">  <span class="attr">color</span>: #fff;</span><br><span class="line">  font-<span class="attr">family</span>: <span class="title class_">Sana</span>;</span><br><span class="line">&#125;</span><br><span class="line">span &#123;</span><br><span class="line">  <span class="attr">background</span>: #fff;</span><br><span class="line">  <span class="attr">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div&gt;xxx&lt;span&gt;xxx&lt;<span class="regexp">/span&gt;xxx&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p><img src="lineheight7.png" alt="example4"></p><p><code>line box</code> 中所有 <code>inline box</code> 的最高点以及最低点决定了它的高度（该计算包括了 <code>strut</code> 的高度）</p></li><li><p>浏览器认为每一个 <code>line box</code> 的起始位置都存在一个宽度为 <code>0</code>、没有任何字符的匿名 <code>inline box</code>，称为 <code>strut</code>。<code>strut</code> 会从父元素继承 <code>line-height</code>，因此它的高度会影响整个 <code>line box</code> 高度的计算</p><p>在下面图片中可看到 <code>img</code> 与外层的 <code>div</code> 存在一个间隙，这就是 <code>strut</code> 造成的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  <span class="attr">background</span>: #eee; </span><br><span class="line">  <span class="attr">border</span>: 1px solid #<span class="number">000</span>; </span><br><span class="line">  box-<span class="attr">sizing</span>: border-box; </span><br><span class="line">&#125;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./image.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="lineheight8.png" alt="example5"></p><p>在这个例子中，默认情况下 <code>img</code> 的底边与父元素的<code>基线</code>对齐（<code>img &#123; vertical-align: baseline; &#125;</code>），而这个基线实际上就是 <code>strut</code> 基线所在的位置，如下图所示：</p><p><img src="lineheight9.png" alt="example6"></p><p><code>strut</code> 其实就相当于一个不可见的字母 <code>x</code>，上文已经提到 <code>strut</code> 本身是具有 <code>line-height</code> 的，所以就导致图片底部多了一段间隙</p></li><li><p>总结一下存在间隙原因：</p><ul><li><code>strut</code> 存在 <code>line-height</code>  </li><li><code>vertical-align</code> 默认值为 <code>baseline</code></li></ul></li><li><p>对应的解决方案：</p><table><thead><tr><th>解决方案</th><th>效果</th><th>潜在问题</th></tr></thead><tbody><tr><td>修改 <code>strut</code> 的 <code>line-height</code></td><td>减少继承空间</td><td><code>strut</code> 的 <code>line-height</code> 不是能够直接设置的，所以需设置父元素的 <code>line-height</code>，然后让 <code>strut</code> 继承，或修改 <code>font-size</code></td></tr><tr><td>将图片的 <code>vertical-align</code> 设置为其他值</td><td>直接正确对齐图像</td><td>最佳方法</td></tr><tr><td>将图片的 <code>display</code> 设为 <code>block</code></td><td>删除内联级行为</td><td>块元素没有 <code>vertical-align</code> 属性，所以不存在基线对齐</td></tr></tbody></table><p><strong>(1) 和 (3) 点会影响父元素内的文字状态，所以第二种办法比较好</strong></p></li></ul><p>另外，<code>非替换元素</code>的 <code>margin</code>、<code>padding</code> 及 <code>border</code> 属性并不会影响 <code>line box</code> 高度的计算</p><p>当一个 <code>inline-level box</code> 的 <code>line-height</code> 小于 <code>content area</code> 时 <code>line box</code> 的高度就会小于 <code>content area</code>，此时元素的 <code>background</code> 以及 <code>padding</code> 等就会溢出到 <code>line box</code> 外</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  <span class="attr">background</span>: #eee;</span><br><span class="line">  <span class="attr">border</span>: 1px solid #<span class="number">000</span>;</span><br><span class="line">  box-<span class="attr">sizing</span>: border-box;</span><br><span class="line">  font-<span class="attr">size</span>: 50px;</span><br><span class="line">  line-<span class="attr">height</span>: 10px;</span><br><span class="line">&#125;</span><br><span class="line">span &#123;</span><br><span class="line">  <span class="attr">background</span>: red;</span><br><span class="line">  <span class="attr">margin</span>: 10px;</span><br><span class="line">  <span class="attr">padding</span>: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="lineheight10.png" alt="example7"></p><h1 id="line-height-取值和继承"><a href="#line-height-取值和继承" class="headerlink" title="line-height 取值和继承"></a>line-height 取值和继承</h1><p><strong>normal</strong></p><p>默认值。一般情况下，浏览器默认的 <code>line-height</code> 为 <code>1.2</code>，因不同浏览器和字体变化，根据自身字体大小进行计算</p><p>其子元素不再继承父元素 <code>line-height</code> 计算后的最终值，而是先继承 <code>line-height</code> 这个属性然后根据自身的 <code>font-size</code> 来进行计算 –&gt; 可见子元素随着自身 <code>font-size</code> 的大小而做相应比例的缩放</p><p><img src="lineheight11.png" alt="normal"></p><p><strong>number</strong></p><p>若既想要 <code>normal</code> 的灵活又想设置一个自定义的值，则可给 <code>line-height</code> 设置一个数字值</p><p>该方式与 <code>normal</code> 唯一的不同就是数值的大小，该方式可以自己随意设定，而 <code>normal</code> 的值是浏览器决定的，其后代元素会继承这个数值（如 <code>1.5</code>），然后根据自身的 <code>font-size</code> 算出自身的 <code>line-height</code></p><p><img src="lineheight12.png" alt="number"></p><p><strong>inherit</strong></p><p>继承父元素 <code>line-height</code> 值，所以父元素的是多少就是多少，若其后代元素设置<code>line-height</code> 的话也会是这个值</p><p><strong>length</strong></p><p>设置固定的行间距。设置 <code>line-height</code> 为 <code>20px</code>，则该行的行高就是 <code>20px</code>，与 <code>font-size</code> 无关，不会随着 <code>font-size</code> 做相应比例的缩放</p><p>这个长度值会被后代元素继承，所有的后代元素会使用这个 <code>line-height</code> (<code>20px</code>)，除非后代元素自己设定 <code>line-height</code></p><p><strong>百分比 %</strong></p><p>假设自身的 <code>font-size</code> 为 <code>16px</code>，<code>line-height</code> 设为 <code>120%</code>，则其行高为 <code>16 * 120% = 19.2px</code>，<strong>即 <code>line-height</code> 是根据自身的 <code>font-size</code> 计算出来的</strong></p><p>子元素会继承父元素的 <code>line-height</code>，则它继承的是百分比 <code>120%</code> 还是 <code>19.2px</code>？答案是 <code>19.2px</code>，即父元素 <code>line-height</code> 计算后的最终值</p><p><strong>总结</strong></p><p>| 设置方式 | line-height ｜计算后的 line-height | 子元素继承的 line-height |<br>| — | — | — | — |<br>| <code>inherit</code> | 父元素的 line-height | 不用计算 | 父元素的 line-height 值 |<br>| <code>length</code> | 20px | 不用计算 | 20px |<br>| <code>%</code> | 120% | 自身 font-size(16px) * 120% &#x3D; 19.2px | 继承父元素计算后的 line-height 值 19.2px，而不是 120% |<br>| <code>normal</code> | 1.2 | 自身 font-size(16px) * 1.2 &#x3D; 19.2px | 继承 1.2，line-height &#x3D; 自身 font-size * 1.2 |<br>| <code>number</code> | 1.5 | 自身 font-size(16px) * 1.5 &#x3D; 24px | 继承 1.5，line-height &#x3D; 自身 font-size * 1.5 |</p><p>注意：推荐 <code>line-height</code> 的值使用数值，而不是使用 <code>em</code> 单位，因为 <code>em</code> 单位须有个参照值且该参照值不是固定的，不同属性有不同的参照值</p><h1 id="行高的垂直居中性"><a href="#行高的垂直居中性" class="headerlink" title="行高的垂直居中性"></a>行高的垂直居中性</h1><p>行高还有一个特性，叫做<code>垂直居中性</code>，<code>line-height</code> 的最终表现是通过 <code>line boxes</code> 实现的，而无论 <code>line boxes</code> 所占据的高度是多少（无论比文字大还是比文字小），其占据的空间都是与文字内容公用水平中垂线的</p><p>按照上面图片看 <code>test1</code> 的结果，此时 <code>line boxes</code> 的高度为 <code>0</code>，但它是以文字的水平中垂线对称分布的，这一重要特性可以用来实现文字或图片的垂直居中对齐</p><h1 id="使用行高代替高度避免-haslayout"><a href="#使用行高代替高度避免-haslayout" class="headerlink" title="使用行高代替高度避免 haslayout"></a>使用行高代替高度避免 haslayout</h1><p>在某些情形下 <code>line-height</code> 可和 <code>height</code> 互换，因为实现的效果一样，都能撑开一个高度，然而这两个 <code>CSS</code> 属性有一个较隐蔽的差异 –&gt; <strong>即使用 <code>height</code> 会使标签 <code>haslayout</code>，而使用 <code>line-height</code> 则不会</strong></p><p>以前只有 <code>IE6</code> 时曾流行使用 <code>height</code> 清除浮动，就是利用了 <code>IE</code> 下 <code>height</code> 触发 <code>haslayout</code> 的属性，但有时 <code>haslayout</code> 并不需要，反而要避免</p><p>使用 <code>line-height</code> 代替 <code>height</code>，其原因在于：</p><ul><li><p><code>IE6/7</code> 下，类似 <code>inline-block</code> 属性的元素里若有 <code>block</code> 属性的元素，若该 <code>block haslayout</code>，则该标签会冲破外部 <code>inline-block</code> 的显示而宽度 <code>100%</code> 显示，从使按钮自适应文字大小的效果失效</p></li><li><p>解决：<strong>使用 <code>line-height</code> 代替 <code>height</code></strong></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;span <span class="keyword">class</span>=<span class="string">&quot;out&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;in1&quot;</span>&gt;</span>height:20px;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/span&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;out&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;in2&quot;</span>&gt;</span>line-height:20px;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">.<span class="property">out</span> &#123;</span><br><span class="line">  <span class="attr">display</span>:inline-block; </span><br><span class="line">  <span class="attr">background</span>:#a0b3d6; </span><br><span class="line">  margin-<span class="attr">top</span>:20px;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">in1</span>&#123; <span class="attr">display</span>:block; <span class="attr">height</span>:20px; &#125;</span><br><span class="line">.<span class="property">in2</span>&#123; <span class="attr">display</span>:block; line-<span class="attr">height</span>:20px; &#125;</span><br></pre></td></tr></table></figure><p><img src="lineheight13.png" alt="alt text"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>script 标签的 defer 与 async</title>
      <link href="/2021/04/15/script-defer-async/"/>
      <url>/2021/04/15/script-defer-async/</url>
      
        <content type="html"><![CDATA[<p><img src="script.png" alt="script 标签"></p><h1 id="普通-script-标签"><a href="#普通-script-标签" class="headerlink" title="普通 script 标签"></a>普通 script 标签</h1><p><code>JS</code> 可能会修改 <code>HTML</code> 和 <code>CSS</code>，因此 <code>JS</code> 的下载执行过程不能和 <code>HTML/CSS</code> 并行</p><p>代码执行过程：</p><ul><li><code>HTML</code> 解析过程中若碰到外联的 <code>JS</code> 会暂时中止 <code>HTML</code> 的解析流程</li><li>等待脚本下载和解析完成后再继续进行之前中断掉的 <code>HTML</code> 解析流程</li></ul><p>因此，<code>script</code> 标签外联 <code>JS</code> 加载有这样的缺点：</p><ul><li><strong>会影响整个页面效率，一旦网速不好整个网站将等待 <code>JS</code> 加载而不进行后续渲染</strong></li><li><strong>由于中断了 <code>HTML</code> 解析流程，所以会导致页面空白等，影响体验</strong></li></ul><blockquote><p>早前，常用的写法是将 <code>script</code> 标签写在 <code>body</code> 最后面，等 <code>DOM</code> 全部解析完成后才加载 <code>JS</code>，但 <code>HTML5</code> 标准有另一套异步加载 <code>JS</code> 的方法（<code>defer</code> &#x2F; <code>async</code>）</p></blockquote><h1 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h1><p>在 <code>script</code> 标签的行间写一个 <code>defer=“defer”</code> 或直接写 <code>defer</code> 就可让这个 <code>script</code> 外联的 <code>JS</code> 变成异步加载</p><p>代码执行过程：</p><ul><li><code>HTML</code> 解析流程中若碰到外联 <code>JS</code> 时会开辟新线程来下载脚本，下载完成后不会立即解析，因此不会阻塞 <code>HTML</code> 的解析流程</li><li>等到 <code>HTML</code> 解析完毕后（不包括下载完里面的资源），<code>DOMContentLoaded</code> 事件调用前再进行相应脚本的执行解析</li><li>注意：<code>DOMContentLoaded</code> 事件会等待 <code>defer</code> 的脚本执行完后才触发</li></ul><blockquote><p>注意：</p><ul><li>这种方式可同时在 <code>script</code> 闭合标签间写代码</li><li>该方法只有 <code>IE</code> 和一些高版本的 <code>firefox</code> 和 <code>chrome</code> 可以用</li><li><code>IE6</code> 和 <code>IE7</code> 的异步加载最多只能有 <code>2</code> 个，超过两个时必须等前两个加载完才会加载第三个</li><li><strong>所有 <code>defer</code> 的 <code>JS</code> 代码都保证按照顺序执行</strong></li></ul></blockquote><h1 id="async"><a href="#async" class="headerlink" title="async"></a>async</h1><p><code>async</code> 是 <code>asynchronous</code> 的缩写，是 <code>HTML5</code> 标准</p><p>代码执行过程：</p><ul><li><code>HTML</code> 解析流程中若碰到外联 <code>JS</code> 时会开辟新线程来下载脚本，下载完成后立即解析执行，且解析流程会中断 <code>HTML</code> 解析流程</li><li>等到脚本执行完成后才会继续进行之前中断掉的 <code>HTML</code> 解析流程</li></ul><blockquote><p>注意：</p><ul><li>这种方法除了 <code>IE6 ～ IE8</code> 其他的浏览器都好用</li><li>该方式不能把代码写在 <code>script</code> 闭合标签里，只能引用外部脚本（虽然标准是这么写的，但现在随着内核升级，<code>async</code> 的 <code>script</code> 标签里也可写代码，在没有 <code>src</code> 情况下）</li><li><strong><code>async</code> 的 <code>JS</code> 代码不能保证是顺序执行的，而是按照 <code>race</code> 的方式哪个脚本先下载完就先解析哪个脚本</strong></li></ul></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong><code>defer</code> 和 <code>async</code> 这两个属性不能一起使用</strong>，若同时使用 <code>async</code> 和 <code>defer</code> 属性，<code>defer</code> 不起作用，浏览器行为由 <code>async</code> 属性决定</p><h1 id="兼容性写法"><a href="#兼容性写法" class="headerlink" title="兼容性写法"></a>兼容性写法</h1><p>暴力写法：直接写两个 <code>script</code> 标签，一个采用 <code>defer</code> 一个采用 <code>async</code>。这种方法的缺陷：</p><ul><li><code>IE</code> 高版本会加载两遍从而引起冲突</li><li>但有些浏览器两个都没有从而一个都加载不出来</li></ul><p>优化写法：<strong>通过动态添加 <code>script</code> 标签，<code>W3C</code> 的标准规定动态添加的 <code>script</code> 标签是异步的</strong></p><p>这里 <code>src</code> 部分的下载是异步的，不会阻塞后面代码的执行，即可一边把 <code>script</code> 插入到 <code>DOM</code> 中一边下载资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要注意的是 readyState 的 if-else 一定要写在 script.src = url 和 appendChild 之前</span></span><br><span class="line"><span class="comment">// 因电脑速度可能会很快，刚走到 src = url 部分就已经加载完毕了, 此时 readyState 已变成 loaded，后面就不会触发 onreadystatechange 事件</span></span><br><span class="line"><span class="comment">// 若回调函数是写在需要加载进来的文件里的方法，需要把该方法放到匿名函数里，这样在语法解析时才不会因为函数未声明而报错，确保脚本加载完成后再执行这些方法</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">loadScript</span>(<span class="params">url, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">    script.<span class="property">type</span> = <span class="string">&quot;text/javascript&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (script.<span class="property">readyState</span>) &#123; <span class="comment">// IE 和高版本的 chrome、firefox</span></span><br><span class="line">      script.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (script.<span class="property">readeyState</span> === <span class="string">&quot;loaded&quot;</span> || script.<span class="property">readeyState</span> === <span class="string">&quot;complete&quot;</span>) &#123;</span><br><span class="line">          script.<span class="property">onreadystatechange</span> = <span class="literal">null</span>;</span><br><span class="line">          callback &amp;&amp; <span class="title function_">callback</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      script.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">// safari chrome opera firefox</span></span><br><span class="line">        callback &amp;&amp; <span class="title function_">callback</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    script.<span class="property">src</span> = url;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
